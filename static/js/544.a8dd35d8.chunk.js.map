{"version":3,"file":"static/js/544.a8dd35d8.chunk.js","mappings":"8NAEaA,EAAUC,EAAAA,EAAAA,IAAH,kQAYPC,EAASD,EAAAA,EAAAA,IAAH,mFAgCNE,GA1BOF,EAAAA,EAAAA,IAAH,sQAYKA,EAAAA,EAAAA,OAAH,oPAcCA,EAAAA,EAAAA,GAAH,8PAkBJG,EAAOH,EAAAA,EAAAA,GAAH,qV,GAkBIA,EAAAA,EAAAA,GAAH,uE,QC7ClB,EAhCmB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACdC,EAAc,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAQE,QAAO,SAAAC,GAAK,OAAIA,EAAMC,WAAV,IAE3C,OACE,SAACT,EAAD,WACE,SAACG,EAAD,iBACGG,QADH,IACGA,OADH,EACGA,EAAgBI,KAAI,SAAAF,GAAK,OACxB,SAAC,KAAD,CAAMG,GAAE,kBAAaH,EAAMI,IAA3B,UACE,UAACR,EAAD,YACE,SAACF,EAAD,CACEW,IAAG,yCAAoCL,EAAMC,aAC7CK,IAAKN,EAAMO,SAEb,uBAAIP,EAAMO,UALDP,EAAMI,KADmBJ,EAAMI,GADpB,OAcjC,C,6FCYD,UA/Ba,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,MAAsBC,KAAKL,GAC3BE,GAAU,EACX,GAAE,IAGDd,IACE,gCACGa,IAAU,SAAC,IAAD,KACX,4CACA,SAAC,IAAD,CAAYb,OAAQA,MAI3B,C,yLCvBKkB,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDP,EAAmB,mCAAG,sGACVE,EAAUM,IAAI,uBADJ,uBACzBC,EADyB,EACzBA,KADyB,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAMC,GAAN,yFACTV,EAAUM,IAAI,gBAAiB,CACpDH,OAAQ,CAAEO,MAAAA,KAFoB,uBACxBH,EADwB,EACxBA,KADwB,kBAIzBA,EAAKC,SAJoB,2CAAH,sDAOlBG,EAAiB,mCAAG,WAAMC,GAAN,yFACRZ,EAAUM,IAAV,iBAAwBM,IADhB,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBM,EAAc,mCAAG,WAAMD,GAAN,yFACLZ,EAAUM,IAAV,iBAAwBM,EAAxB,aADK,uBACpBL,EADoB,EACpBA,KADoB,kBAErBA,EAAKO,MAFgB,2CAAH,sDAKdC,EAAY,mCAAG,WAAMH,GAAN,yFACHZ,EAAUM,IAAV,iBAAwBM,EAAxB,aADG,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBA,EAAKC,SAFc,2CAAH,qD","sources":["components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 20px;\n  max-width: 960px;\n`;\n\nexport const Poster = styled.img`\n  width: 300px;\n  height: 400px;\n  margin-bottom: 10px;\n`;\n\nexport const Link = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  width: 300px;\n  padding: 10px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #fff;\n  border: 1px solid #000;\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n  padding: 0;\n  list-style: none;\n\n  & > a {\n    text-decoration: none;\n  }\n\n  & > a:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  width: 300px;\n  height: 500px;\n\n  & > p {\n    margin-bottom: 10px;\n    text-decoration: none;\n    color: #212121;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Item, List, Poster, Wrapper } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const filteredMovies = movies?.filter(movie => movie.poster_path); \n\n  return (\n    <Wrapper>\n      <List>\n        {filteredMovies?.map(movie => (\n          <Link to={`/movies/${movie.id}`} key={movie.id}>\n            <Item key={movie.id}>\n              <Poster\n                src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n                alt={movie.title}\n              />\n              <p>{movie.title}</p>\n            </Item>\n          </Link>\n        ))}\n      </List>\n    </Wrapper>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import React, { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../../services/movies-api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetchTrendingMovies().then(setMovies);\n    setLoader(false);\n  }, []);\n\n  return (\n    movies && (\n      <>\n        {loader && <Loader />}\n        <h1>Trending today</h1>\n        <MoviesList movies={movies} />\n      </>\n    )\n  );\n};\n\nHome.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd06fba2820f14d5608dbdd90132ff73d',\n    language: 'en-US',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await moviesApi.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await moviesApi.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/credits`);\n  return data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/reviews`);\n  return data.results;\n};\n\nexport const fetchMovieByCategory = async category => {\n  const { data } = await moviesApi.get(`/movie/${category}`);\n  return data.results;\n};\n\nexport const fetchMovieByCategoryWithPage = async (category, page) => {\n  const { data } = await moviesApi.get(`/movie/${category}`, {\n    params: { page },\n  });\n  return data.results;\n};\n"],"names":["Wrapper","styled","Poster","List","Item","movies","filteredMovies","filter","movie","poster_path","map","to","id","src","alt","title","useState","setMovies","loader","setLoader","useEffect","fetchTrendingMovies","then","moviesApi","axios","baseURL","params","api_key","language","get","data","results","fetchMoviesByQuery","query","fetchMovieDetails","movieId","fetchMovieCast","cast","fetchReviews"],"sourceRoot":""}