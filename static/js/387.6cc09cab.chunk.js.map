{"version":3,"file":"static/js/387.6cc09cab.chunk.js","mappings":"iQAEaA,EAAUC,EAAAA,EAAAA,IAAH,kQAYPC,EAAOD,EAAAA,EAAAA,GAAH,oKAUJE,EAAOF,EAAAA,EAAAA,GAAH,sOAWJG,EAAeH,EAAAA,EAAAA,IAAH,gEAKZI,EAAOJ,EAAAA,EAAAA,GAAH,+CAIJK,EAAYL,EAAAA,EAAAA,EAAH,sCAITM,EAASN,EAAAA,EAAAA,EAAH,6D,mBCiBnB,EAjDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,IAAeR,GAASS,KAAKL,GAC7BE,GAAU,EACX,GAAE,CAACN,KAGF,gCACGK,IAAU,SAACK,EAAA,EAAD,KACX,SAAClB,EAAD,UACGW,GAAQA,EAAKQ,OAAS,GACrB,SAACjB,EAAD,UACGS,EACES,QAAO,qBAAGC,YAAH,IACPC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWJ,EAAxB,EAAwBA,aAAxB,OACH,UAAClB,EAAD,YACE,SAACC,EAAD,CACEsB,IAAG,yCAAoCL,GACvCM,IAAKH,KAEP,SAACnB,EAAD,UAAOmB,KACP,SAAClB,EAAD,UAAYmB,MANHF,EADR,OAYT,SAAChB,EAAD,wDAKT,C,yLClDKqB,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAmB,mCAAG,sGACVN,EAAUO,IAAI,uBADJ,uBACzBC,EADyB,EACzBA,KADyB,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAMC,GAAN,yFACTX,EAAUO,IAAI,gBAAiB,CACpDJ,OAAQ,CAAEQ,MAAAA,KAFoB,uBACxBH,EADwB,EACxBA,KADwB,kBAIzBA,EAAKC,SAJoB,2CAAH,sDAOlBG,EAAiB,mCAAG,WAAMhC,GAAN,yFACRoB,EAAUO,IAAV,iBAAwB3B,IADhB,uBACvB4B,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBpB,EAAc,mCAAG,WAAMR,GAAN,yFACLoB,EAAUO,IAAV,iBAAwB3B,EAAxB,aADK,uBACpB4B,EADoB,EACpBA,KADoB,kBAErBA,EAAKzB,MAFgB,2CAAH,sDAKd8B,EAAY,mCAAG,WAAMjC,GAAN,yFACHoB,EAAUO,IAAV,iBAAwB3B,EAAxB,aADG,uBAClB4B,EADkB,EAClBA,KADkB,kBAEnBA,EAAKC,SAFc,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 20px;\n  max-width: 960px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  width: 300px;\n`;\n\nexport const ProfileImage = styled.img`\n  width: 100%;\n  margin-bottom: 10px;\n`;\n\nexport const Name = styled.h3`\n  margin-bottom: 5px;\n`;\n\nexport const Character = styled.p`\n  margin: 0;\n`;\n\nexport const NoCast = styled.p`\n  text-align: center;\n  margin: 0;\n`;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../../services/movies-api';\nimport {\n  Wrapper,\n  List,\n  Item,\n  ProfileImage,\n  Name,\n  Character,\n  NoCast,\n} from './Cast.styled';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetchMovieCast(movieId).then(setCast);\n    setLoader(false);\n  }, [movieId]);\n\n  return (\n    <>\n      {loader && <Loader />}\n      <Wrapper>\n        {cast && cast.length > 0 ? (\n          <List>\n            {cast\n              .filter(({ profile_path }) => profile_path)\n              .map(({ id, name, character, profile_path }) => (\n                <Item key={id}>\n                  <ProfileImage\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                  <Name>{name}</Name>\n                  <Character>{character}</Character>\n                </Item>\n              ))}\n          </List>\n        ) : (\n          <NoCast>We don't have any cast for this movie</NoCast>\n        )}\n      </Wrapper>\n    </>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd06fba2820f14d5608dbdd90132ff73d',\n    language: 'en-US',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await moviesApi.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await moviesApi.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/credits`);\n  return data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/reviews`);\n  return data.results;\n};\n\nexport const fetchMovieByCategory = async category => {\n  const { data } = await moviesApi.get(`/movie/${category}`);\n  return data.results;\n};\n\nexport const fetchMovieByCategoryWithPage = async (category, page) => {\n  const { data } = await moviesApi.get(`/movie/${category}`, {\n    params: { page },\n  });\n  return data.results;\n};\n"],"names":["Wrapper","styled","List","Item","ProfileImage","Name","Character","NoCast","movieId","useParams","useState","cast","setCast","loader","setLoader","useEffect","fetchMovieCast","then","Loader","length","filter","profile_path","map","id","name","character","src","alt","moviesApi","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","fetchMoviesByQuery","query","fetchMovieDetails","fetchReviews"],"sourceRoot":""}