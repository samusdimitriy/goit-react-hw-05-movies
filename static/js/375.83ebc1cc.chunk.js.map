{"version":3,"file":"static/js/375.83ebc1cc.chunk.js","mappings":"+PAGaA,EAAUC,EAAAA,EAAAA,IAAH,6NAWPC,EAASD,EAAAA,EAAAA,IAAH,qEAKNE,EAAcF,EAAAA,EAAAA,IAAH,8JAaXG,EAASH,EAAAA,EAAAA,OAAH,8UAkBNI,EAAcJ,EAAAA,EAAAA,IAAH,0CAIXK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,8U,6BC+BvB,EAtEqB,WACnB,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KAQA,IANAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,IAAkBV,GAASW,KAAKP,GAChCI,GAAU,EACX,GAAE,CAACR,KAECG,EAAO,OAAO,KAEnB,IAAQS,EAAuDT,EAAvDS,YAAaC,EAA0CV,EAA1CU,MAAOC,EAAmCX,EAAnCW,aAAcC,EAAqBZ,EAArBY,SAAUC,EAAWb,EAAXa,OAMpD,OACE,4BACGT,IAAU,SAACU,EAAA,EAAD,KACX,0BACE,SAACrB,EAAD,CAAQsB,QARU,WACtBb,EAAS,UACV,EAMK,qBAEF,UAACb,EAAD,YACE,SAACE,EAAD,CACEyB,IACEP,EAAW,yCAC2BA,GAD3B,gFAKf,UAACjB,EAAD,YACE,wBAAKkB,KACL,oCAA2B,GAAfC,EAAZ,QACA,0BACE,4CACCC,MAEH,0BACE,sCADF,OAEGC,QAFH,IAEGA,OAFH,EAEGA,EAAQI,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,gBAI5C,UAACzB,EAAD,YACE,SAACC,EAAD,CAAYyB,GAAE,kBAAavB,EAAb,SAAd,mBACA,SAACF,EAAD,CAAYyB,GAAE,kBAAavB,EAAb,YAAd,yBAEF,SAAC,KAAD,MAGL,C,yLCnEKwB,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAmB,mCAAG,sGACVN,EAAUO,IAAI,uBADJ,uBACzBC,EADyB,EACzBA,KADyB,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAMC,GAAN,yFACTX,EAAUO,IAAI,gBAAiB,CACpDJ,OAAQ,CAAEQ,MAAAA,KAFoB,uBACxBH,EADwB,EACxBA,KADwB,kBAIzBA,EAAKC,SAJoB,2CAAH,sDAOlBvB,EAAiB,mCAAG,WAAMV,GAAN,yFACRwB,EAAUO,IAAV,iBAAwB/B,IADhB,uBACvBgC,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBI,EAAc,mCAAG,WAAMpC,GAAN,yFACLwB,EAAUO,IAAV,iBAAwB/B,EAAxB,aADK,uBACpBgC,EADoB,EACpBA,KADoB,kBAErBA,EAAKK,MAFgB,2CAAH,sDAKdC,EAAY,mCAAG,WAAMtC,GAAN,yFACHwB,EAAUO,IAAV,iBAAwB/B,EAAxB,aADG,uBAClBgC,EADkB,EAClBA,KADkB,kBAEnBA,EAAKC,SAFc,2CAAH,qD","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 36px;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 20px;\n  max-width: 960px;\n`;\n\nexport const Poster = styled.img`\n  max-width: 300px;\n  margin-bottom: 10px;\n`;\n\nexport const WrapperInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & > h2 {\n    margin-bottom: 10px;\n  }\n\n  & > p {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #fff;\n  border: 1px solid #000;\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n  margin-bottom: 20px;\n  text-decoration: none;\n  color: #212121;\n  font-weight: 500;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nexport const WrapperLink = styled.div`\n  display: flex;\n`;\n\nexport const StyledLink = styled(RouterLink)`\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #fff;\n  border: 1px solid #000;\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n  margin: 0 10px 20px;\n  text-decoration: none;\n  color: #212121;\n  font-weight: 500;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import React from 'react';\nimport { Outlet, useParams, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport {\n  Wrapper,\n  Poster,\n  Button,\n  WrapperInfo,\n  StyledLink,\n  WrapperLink,\n} from './MovieDetails.styled';\nimport { fetchMovieDetails } from '../../services/movies-api';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const navigate = useNavigate();\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetchMovieDetails(movieId).then(setMovie);\n    setLoader(false);\n  }, [movieId]);\n\n  if (!movie) return null;\n\n  const { poster_path, title, vote_average, overview, genres } = movie;\n\n  const handleBackClick = () => {\n    navigate('/movies');\n  };\n\n  return (\n    <main>\n      {loader && <Loader />}\n      <div>\n        <Button onClick={handleBackClick}>Back</Button>\n      </div>\n      <Wrapper>\n        <Poster\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n          }\n        />\n        <WrapperInfo>\n          <h2>{title}</h2>\n          <p>Rating: {vote_average * 10}%</p>\n          <p>\n            <span>Description: </span>\n            {overview}\n          </p>\n          <p>\n            <span>Genre: </span>\n            {genres?.map(({ name }) => name).join(', ')}\n          </p>\n        </WrapperInfo>\n      </Wrapper>\n      <WrapperLink>\n        <StyledLink to={`/movies/${movieId}/cast`}>Cast</StyledLink>\n        <StyledLink to={`/movies/${movieId}/reviews`}>Reviews</StyledLink>\n      </WrapperLink>\n      <Outlet />\n    </main>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }),\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd06fba2820f14d5608dbdd90132ff73d',\n    language: 'en-US',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await moviesApi.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await moviesApi.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/credits`);\n  return data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/reviews`);\n  return data.results;\n};\n\nexport const fetchMovieByCategory = async category => {\n  const { data } = await moviesApi.get(`/movie/${category}`);\n  return data.results;\n};\n\nexport const fetchMovieByCategoryWithPage = async (category, page) => {\n  const { data } = await moviesApi.get(`/movie/${category}`, {\n    params: { page },\n  });\n  return data.results;\n};\n"],"names":["Wrapper","styled","Poster","WrapperInfo","Button","WrapperLink","StyledLink","RouterLink","movieId","useParams","useState","movie","setMovie","navigate","useNavigate","loader","setLoader","useEffect","fetchMovieDetails","then","poster_path","title","vote_average","overview","genres","Loader","onClick","src","map","name","join","to","moviesApi","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","fetchMoviesByQuery","query","fetchMovieCast","cast","fetchReviews"],"sourceRoot":""}